"""hydrogen fix

Revision ID: dd013935d196
Revises: e133154e2e58
Create Date: 2025-10-24 11:25:02.126820

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'dd013935d196'
down_revision: Union[str, None] = 'e133154e2e58'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Handle index changes for analytes table
    try:
        op.drop_index('ix_analytes_analyte_symbol', table_name='analytes')
    except:
        pass  # Index might not exist
    
    try:
        op.drop_index('ix_analytes_id', table_name='analytes')
    except:
        pass  # Index might not exist
    
    op.create_index(op.f('ix_analytes_analyte_symbol'), 'analytes', ['analyte_symbol'], unique=True)
    op.create_index(op.f('ix_analytes_id'), 'analytes', ['id'], unique=False)
    
    # SQLite doesn't support ALTER COLUMN for type changes, so we need to recreate tables
    # For now, we'll just add the new column and let the application handle the enum conversion
    op.add_column('scalar_results', sa.Column('h2_grams_per_ton_yield', sa.Float(), nullable=True))
    
    # Note: The enum changes for chemical_additives.unit, compounds.preferred_unit, 
    # and experiments.status will be handled at the application level since SQLite
    # doesn't support ALTER COLUMN for type changes. The existing VARCHAR columns
    # will continue to work with the enum values.
    
    # For elemental_analysis nullable changes, we'll handle them in a separate migration
    # that uses table recreation if needed
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('scalar_results', 'h2_grams_per_ton_yield')
    
    # Note: The enum changes are handled at the application level
    # since SQLite doesn't support ALTER COLUMN for type changes
    
    try:
        op.drop_index(op.f('ix_analytes_id'), table_name='analytes')
    except:
        pass  # Index might not exist
    
    try:
        op.drop_index(op.f('ix_analytes_analyte_symbol'), table_name='analytes')
    except:
        pass  # Index might not exist
    
    op.create_index('ix_analytes_analyte_symbol', 'analytes', ['analyte_symbol'], unique=False)
    # ### end Alembic commands ###
